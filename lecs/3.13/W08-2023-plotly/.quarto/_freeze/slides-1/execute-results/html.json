{
  "hash": "ed3bf0169858482741c6c845e8c18e41",
  "result": {
    "markdown": "# Plotly\nOverview and introduction\n\n## What is Plotly?\n\n* Plotly is a technical computing company headquartered in Montreal, Quebec   \n    ![](https://upload.wikimedia.org/wikipedia/commons/8/8a/Plotly-logo.png)\n* The company develops tools for data visualization, analytics, and statistical tools, as well as graphing libraries for Python, R, MATLAB, Perl, Julia, Arduino, and REST.\n\n## The Plotly company's tool suite\n\n- **Dash** Open-source Python , R, Julia, framework for building analytic applications.  \n- **Dash Enterprise** is Plotlyâ€™s paid product for building, testing, deploying, managing, and scaling Dash applications.\n- **Chart Studio Cloud** is a free, online tool for creating interactive graphs. It has a point-and-click user interface for importing and analyzing data.\n- **Chart Studio Enterprise** is a paid product that allows teams to create, style, and share interactive graphs on a single platform. It offers expanded authentication and file export options, and does not limit sharing and viewing.\n- **Data visualization libraries** `Plotly.js` is an open-source JavaScript library for creating graphs. There are wrappers in Python, R, MATLAB, Node.js, Julia, Arudio, etc\n- **Figure Converters** which convert matplotlib, ggplot2, and IGOR Pro graphs into interactive, online graphs.\n\n## Where do we stand? \n* Today we focus on the client side libraries, which wrap `plotly.js` for R and Python.   \n    <center>![](img/2023-03-09-15-38-31.png){width=750} <center>\n\n## Example: Plotly.js \n\n* We have already interacted a bit with Plotly.js in Lab-XX\n\n## Plotly.js: Interactive controls \n\nPlotly plots have interactive controls, shown in the top-right,e to do the following:\n\n![](img/2023-03-10-13-08-41.png)\n\n- **Pan:** Move around in the plot.\n- **Box Select:** Select a rectangular region of the plot to be highlighted.\n- **Lasso Select:** Draw a region of the plot to be highlighted.\n- **Autoscale:** Zoom to a \"best\" scale.\n- **Reset axes:** Return the plot to its original state.\n- **Toggle Spike Lines:** Show or hide lines to the axes whenever you hover over data.\n- **Show closest data on hover:** Show details for the nearest data point to the cursor.\n- **Compare data on hover:** Show the nearest data point to the x-coordinate of the cursor.\n\n<sup>Source: [click here](https://www.datacamp.com/cheat-sheet/plotly-express-cheat-sheet) <sup>\n\n# Plotly in Python\nIntroduction to `plotly.py`\n\n## Recall: General idea behind interactive graphics\n![](img/2023-03-10-11-41-04.png)\n\n## How does Plotly.py work?\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n* Let's start on the python side for the sake of explanation\n* Similar to MPL, The fundamental Plotly data-structure is the `Plotly figure` (i.e. charts, plots, maps and diagrams) \n  * Figures are represented as dictionaries or as instances of the plotly.graph_objects.Figure class\n* Python exports the Figure object to a `JSON file` to be rendered by `plotly.js`.    \n<br>\n<sup>Source: [click here](https://plotly.com/python/figure-structure/) <sup>\n:::  \n::: {.column width=\"50%\"}\n![](img/2023-03-10-11-49-51.png){width=300}\n::: \n::::\n\n## Constructing a graph \n\n* When using Plotly in python there are generally two ways to create graphs.  \n    <center>![](img/2023-03-10-11-58-21.png){width=600}<center>\n* **Easy method:** The high-level `plotly.express` module which is a set of Python functions to return completed plotly.graph_objects.Figure objects. \n* **Advanced method**: Plotly `graph_objects` module which has more control, customization, and understanding of whats happening \"under the hood\"\n\n## Plotly express vs Graph objects\n\n* Plotly Express is a better starting point for plot creation, since it is powerful and easy\n* Plotly Express functions uses graph objects internally and return a plotly.graph_object\n  * Therefore, you can also switch at any point to working as a graph_object\n\n* **It is good to use the graph_objects module in the following cases:**\n\n  - **Non-standard visualizations**: It is difficult to create not standard graphs with Plotly Express, therefore graph_objects must be used\n\n  - **When you have a lot of customizations:** If you want to make a lot of changes to most aspects of your charts, you might end up writing the same amount of code and putting in the same amount of effort, so you might consider doing it directly using the graph_objects module.\n\n  - **Sub-plots**: Sometimes you want to have multiple charts side by side, or in a grid. If these are different charts and not facets, then it's better to do with graph_objects.\n\n## Aside: Embedding HTML into documents\n\n* When using Quarto or Jupyter notebook, often we want to embed individual HTML files (e.g. Plotly output files) into our documents. \n* There are multiple ways to do this in python, however, one option is to use an IFrame\n* This can be done with the following commands.   \n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\n# CREATE FIGURE OBJECT\nimport plotly.express as px\nfig = px.line(x=[\"a\",\"b\",\"c\"], y=[1,3,2], title=\"sample figure\")\n\n# SAVE TO FILES\nfile_name=\"./img/plotly-0.html\"\nfig.write_html(file_name)\n\n# RE-LOAD AS AN IFRAME\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=500, height=400)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n\n        <iframe\n            width=\"500\"\n            height=\"400\"\n            src=\"./img/plotly-0.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Aside: Plotly in VS-code inside `.ipynb`\n\n* If you are using Plotly within the VS Code Notebook Editor you will need to add a line of code to ensure that your plots can be seen both within VS Code and when rendered to HTML by Quarto. \n* Note that this workaround is only required for the VS Code Notebook Editor (it is not required if you are using Jupyter Lab or if you are editing a plain-text .qmd file).\n* You can do this by configuring the Plotly default renderer as follows:\n\n::: {.cell execution_count=3}\n``` {.python .cell-code code-fold=\"false\"}\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\n# pio.renderers.default = \"plotly_mimetype+notebook\"\n```\n:::\n\n\n<sup>Source: [click here](https://quarto.org/docs/interactive/widgets/jupyter.html) <sup>\n\n## Example: MPL to Plotly conversion \n\n * We can recycle our old plots, but add interactivity, using `plotly.tools` converters.  \n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n# import warnings\n# warnings.filterwarnings(\"ignore\")\n\n# IMPORT MODULES\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport plotly.tools as tls\n\n# CREATE DATA ARRAYS\nx = np.linspace(-2.0 * np.pi, 2.0 * np.pi, 51)\ny = np.sin(x)\n\n# MAKE A MPL FIGURE\nmpl_fig = plt.figure()\nplt.plot(x, y, \"ko--\")\nplt.xlabel(\"x\")\nplt.ylabel(\"sin(x)\")\n# plt.show()\n\n# CONVERT USING PLOTLY\nfig = tls.mpl_to_plotly(mpl_fig)\n\n# UPDATE THEME\nfig.update_layout(template=\"plotly_white\")\nfig.update_layout(width=800,height=400)\n\n# SHOW\nfig.show()\n\n# # # SAVE AND RENDER \n# file_name=\"./img/mpl-to-plotly.html\"\n# fig.write_html(file_name)\n# from IPython.display import IFrame\n# IFrame(src=file_name, width=900, height=500)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"62928966-b17f-4ef5-94a7-99956d5d7474\" class=\"plotly-graph-div\" style=\"height:400px; width:800px;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"62928966-b17f-4ef5-94a7-99956d5d7474\")) {                    Plotly.newPlot(                        \"62928966-b17f-4ef5-94a7-99956d5d7474\",                        [{\"line\":{\"color\":\"rgba (0, 0, 0, 1)\",\"dash\":\"dash\",\"width\":1.5},\"marker\":{\"color\":\"#000000\",\"line\":{\"color\":\"#000000\",\"width\":1.0},\"opacity\":1,\"size\":6.0,\"symbol\":\"circle\"},\"mode\":\"lines+markers\",\"name\":\"_child0\",\"x\":[-6.283185307179586,-6.031857894892402,-5.7805304826052195,-5.529203070318036,-5.277875658030853,-5.026548245743669,-4.775220833456485,-4.523893421169301,-4.2725660088821185,-4.0212385965949355,-3.7699111843077517,-3.518583772020568,-3.2672563597333846,-3.015928947446201,-2.7646015351590174,-2.513274122871834,-2.2619467105846507,-2.010619298297467,-1.759291886010284,-1.5079644737231002,-1.2566370614359172,-1.0053096491487334,-0.7539822368615496,-0.5026548245743667,-0.2513274122871829,8.881784197001252e-16,0.2513274122871838,0.5026548245743676,0.7539822368615514,1.0053096491487343,1.2566370614359181,1.507964473723101,1.7592918860102849,2.0106192982974687,2.2619467105846525,2.5132741228718345,2.7646015351590183,3.015928947446202,3.267256359733386,3.5185837720205697,3.7699111843077517,4.0212385965949355,4.272566008882119,4.523893421169303,4.775220833456487,5.026548245743671,5.277875658030853,5.529203070318037,5.78053048260522,6.031857894892404,6.283185307179586],\"xaxis\":\"x\",\"y\":[2.4492935982947064e-16,0.24868988716485535,0.4817536741017153,0.684547105928689,0.8443279255020151,0.9510565162951536,0.9980267284282716,0.9822872507286885,0.9048270524660194,0.7705132427757894,0.587785252292473,0.36812455268467753,0.12533323356430387,-0.12533323356430454,-0.36812455268467853,-0.5877852522924736,-0.7705132427757896,-0.9048270524660199,-0.9822872507286887,-0.9980267284282716,-0.9510565162951535,-0.8443279255020149,-0.6845471059286882,-0.4817536741017151,-0.24868988716485427,8.881784197001252e-16,0.24868988716485513,0.4817536741017159,0.6845471059286894,0.8443279255020153,0.9510565162951539,0.9980267284282716,0.9822872507286886,0.9048270524660191,0.7705132427757884,0.5877852522924732,0.3681245526846777,0.12533323356430365,-0.1253332335643052,-0.36812455268467914,-0.587785252292473,-0.7705132427757894,-0.9048270524660198,-0.9822872507286888,-0.9980267284282714,-0.9510565162951531,-0.8443279255020151,-0.6845471059286883,-0.48175367410171455,-0.24868988716485363,-2.4492935982947064e-16],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"autosize\":false,\"height\":400,\"hovermode\":\"closest\",\"width\":800,\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"margin\":{\"b\":164,\"l\":300,\"pad\":0,\"r\":239,\"t\":180},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"mirror\":\"ticks\",\"nticks\":9,\"range\":[-6.911503837897545,6.911503837897545],\"showgrid\":false,\"showline\":true,\"side\":\"bottom\",\"tickfont\":{\"size\":10.0},\"ticks\":\"inside\",\"type\":\"linear\",\"zeroline\":false,\"title\":{\"text\":\"x\",\"font\":{\"color\":\"#000000\",\"size\":10.0}}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"mirror\":\"ticks\",\"nticks\":11,\"range\":[-1.0978294012710987,1.0978294012710987],\"showgrid\":false,\"showline\":true,\"side\":\"left\",\"tickfont\":{\"size\":10.0},\"ticks\":\"inside\",\"type\":\"linear\",\"zeroline\":false,\"title\":{\"text\":\"sin(x)\",\"font\":{\"color\":\"#000000\",\"size\":10.0}}},\"showlegend\":false},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('62928966-b17f-4ef5-94a7-99956d5d7474');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n# Plotly.py \nGetting started with `Plotly express`   \n<br>\n<sup> **Note**: Repeated package imports are intentional to make the code cells self contained <sup>\n\n## Plotly Express: function arguments\n\n* The input arguments for a Plotly express function are similar to other libraries.  \n  * The typical data input is a Pandas data frame as the first argument. \n  * The x argument is a string naming the column to be used on the x-axis. \n  * The y argument can either be a string or a list of strings naming column(s) to be used on the y-axis.\n  * Basic customization is straight-forward   \n  ![](img/2023-03-10-13-23-33.png){width=800}\n\n<!-- ```\npx.plotting_fn(dataframe, # Dataframe being visualized\n               x=[\"column-for-x-axis\"], # Accepts a string or a list of strings\n               y=[\"columns-for-y-axis\"], # Accepts a string or a list of strings\n               title=\"Overall plot title\", # Accepts a string\n               xaxis_title=\"X-axis title\", # Accepts a string\n               yaxis_title=\"Y-axis title\", # Accepts a string\n               width=width_in_pixels, # Accepts an integer\n               height=height_in_pixels) # Accepts an integer\n``` -->\n\n\n<sup>Source: [click here](https://www.datacamp.com/cheat-sheet/plotly-express-cheat-sheet) <sup>\n\n## Plotly Express: Available functions \n\n- **Basics**: [`scatter`](https://plotly.com/python/line-and-scatter/), [`line`](https://plotly.com/python/line-charts/), [`area`](https://plotly.com/python/filled-area-plots/), [`bar`](https://plotly.com/python/bar-charts/), [`funnel`](https://plotly.com/python/funnel-charts/), [`timeline`](https://plotly.com/python/gantt/)\n- **Part-of-Whole**: [`pie`](https://plotly.com/python/pie-charts/), [`sunburst`](https://plotly.com/python/sunburst-charts/), [`treemap`](https://plotly.com/python/treemaps/), [`icicle`](https://plotly.com/python/icicle-charts/), [`funnel_area`](https://plotly.com/python/funnel-charts/)\n- **1D Distributions**: [`histogram`](https://plotly.com/python/histograms/), [`box`](https://plotly.com/python/box-plots/), [`violin`](https://plotly.com/python/violin/), [`strip`](https://plotly.com/python/strip-charts/), [`ecdf`](https://plotly.com/python/ecdf-plots/)\n- **2D Distributions**: [`density_heatmap`](https://plotly.com/python/2D-Histogram/), [`density_contour`](https://plotly.com/python/2d-histogram-contour/), [`imshow`](https://plotly.com/python/imshow/)\n- **3-Dimensional**: [`scatter_3d`](https://plotly.com/python/3d-scatter-plots/), [`line_3d`](https://plotly.com/python/3d-line-plots/)\n- **Multidimensional**: [`scatter_matrix`](https://plotly.com/python/splom/), [`parallel_coordinates`](https://plotly.com/python/parallel-coordinates-plot/), [`parallel_categories`](https://plotly.com/python/parallel-categories-diagram/)\n- **Tile Maps**: [`scatter_mapbox`](https://plotly.com/python/scattermapbox/), [`line_mapbox`](https://plotly.com/python/lines-on-mapbox/), [`choropleth_mapbox`](https://plotly.com/python/mapbox-county-choropleth/), [`density_mapbox`](https://plotly.com/python/mapbox-density-heatmaps/)\n- **Outline Maps**: [`scatter_geo`](https://plotly.com/python/scatter-plots-on-maps/), [`line_geo`](https://plotly.com/python/lines-on-maps/), [`choropleth`](https://plotly.com/python/choropleth-maps/)\n- **Polar Charts**: [`scatter_polar`](https://plotly.com/python/polar-chart/), [`line_polar`](https://plotly.com/python/polar-chart/), [`bar_polar`](https://plotly.com/python/wind-rose-charts/)\n- **Ternary Charts**: [`scatter_ternary`](https://plotly.com/python/ternary-plots/), [`line_ternary`](https://plotly.com/python/ternary-plots/)\n\n<sup>Source: [click here](https://plotly.com/python/plotly-express/) <sup>\n\n## Hello world: Plotly express scatter-plot\n\n* Here is a very basic example using the defaults\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nimport plotly.express as px\nimport seaborn as sns\n\n# GET DATA\ndf = sns.load_dataset(\"penguins\");  #print(df.keys())\n\n# GENERATE PLOTLY FIGURE\nfig = px.scatter(\n    data_frame=df,\n    x=\"bill_length_mm\",\n    y=\"body_mass_g\",\n)\n\nimport plotly.io as pio\npio.renderers.default = \"plotly_mimetype+notebook_connected\"\n\nfig.show()\n\n# # SAVE AND RENDER \n# file_name=\"./img/plotly-hello.html\"\n# fig.write_html(file_name)\n# from IPython.display import IFrame\n# IFrame(src=file_name, width=1000, height=500)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"ce0556b9-1490-4926-ac4a-506005d49299\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"ce0556b9-1490-4926-ac4a-506005d49299\")) {                    Plotly.newPlot(                        \"ce0556b9-1490-4926-ac4a-506005d49299\",                        [{\"hovertemplate\":\"bill_length_mm=%{x}<br>body_mass_g=%{y}<extra></extra>\",\"legendgroup\":\"\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\"},\"mode\":\"markers\",\"name\":\"\",\"orientation\":\"v\",\"showlegend\":false,\"x\":[39.1,39.5,40.3,null,36.7,39.3,38.9,39.2,34.1,42.0,37.8,37.8,41.1,38.6,34.6,36.6,38.7,42.5,34.4,46.0,37.8,37.7,35.9,38.2,38.8,35.3,40.6,40.5,37.9,40.5,39.5,37.2,39.5,40.9,36.4,39.2,38.8,42.2,37.6,39.8,36.5,40.8,36.0,44.1,37.0,39.6,41.1,37.5,36.0,42.3,39.6,40.1,35.0,42.0,34.5,41.4,39.0,40.6,36.5,37.6,35.7,41.3,37.6,41.1,36.4,41.6,35.5,41.1,35.9,41.8,33.5,39.7,39.6,45.8,35.5,42.8,40.9,37.2,36.2,42.1,34.6,42.9,36.7,35.1,37.3,41.3,36.3,36.9,38.3,38.9,35.7,41.1,34.0,39.6,36.2,40.8,38.1,40.3,33.1,43.2,35.0,41.0,37.7,37.8,37.9,39.7,38.6,38.2,38.1,43.2,38.1,45.6,39.7,42.2,39.6,42.7,38.6,37.3,35.7,41.1,36.2,37.7,40.2,41.4,35.2,40.6,38.8,41.5,39.0,44.1,38.5,43.1,36.8,37.5,38.1,41.1,35.6,40.2,37.0,39.7,40.2,40.6,32.1,40.7,37.3,39.0,39.2,36.6,36.0,37.8,36.0,41.5,46.5,50.0,51.3,45.4,52.7,45.2,46.1,51.3,46.0,51.3,46.6,51.7,47.0,52.0,45.9,50.5,50.3,58.0,46.4,49.2,42.4,48.5,43.2,50.6,46.7,52.0,50.5,49.5,46.4,52.8,40.9,54.2,42.5,51.0,49.7,47.5,47.6,52.0,46.9,53.5,49.0,46.2,50.9,45.5,50.9,50.8,50.1,49.0,51.5,49.8,48.1,51.4,45.7,50.7,42.5,52.2,45.2,49.3,50.2,45.6,51.9,46.8,45.7,55.8,43.5,49.6,50.8,50.2,46.1,50.0,48.7,50.0,47.6,46.5,45.4,46.7,43.3,46.8,40.9,49.0,45.5,48.4,45.8,49.3,42.0,49.2,46.2,48.7,50.2,45.1,46.5,46.3,42.9,46.1,44.5,47.8,48.2,50.0,47.3,42.8,45.1,59.6,49.1,48.4,42.6,44.4,44.0,48.7,42.7,49.6,45.3,49.6,50.5,43.6,45.5,50.5,44.9,45.2,46.6,48.5,45.1,50.1,46.5,45.0,43.8,45.5,43.2,50.4,45.3,46.2,45.7,54.3,45.8,49.8,46.2,49.5,43.5,50.7,47.7,46.4,48.2,46.5,46.4,48.6,47.5,51.1,45.2,45.2,49.1,52.5,47.4,50.0,44.9,50.8,43.4,51.3,47.5,52.1,47.5,52.2,45.5,49.5,44.5,50.8,49.4,46.9,48.4,51.1,48.5,55.9,47.2,49.1,47.3,46.8,41.7,53.4,43.3,48.1,50.5,49.8,43.5,51.5,46.2,55.1,44.5,48.8,47.2,null,46.8,50.4,45.2,49.9],\"xaxis\":\"x\",\"y\":[3750.0,3800.0,3250.0,null,3450.0,3650.0,3625.0,4675.0,3475.0,4250.0,3300.0,3700.0,3200.0,3800.0,4400.0,3700.0,3450.0,4500.0,3325.0,4200.0,3400.0,3600.0,3800.0,3950.0,3800.0,3800.0,3550.0,3200.0,3150.0,3950.0,3250.0,3900.0,3300.0,3900.0,3325.0,4150.0,3950.0,3550.0,3300.0,4650.0,3150.0,3900.0,3100.0,4400.0,3000.0,4600.0,3425.0,2975.0,3450.0,4150.0,3500.0,4300.0,3450.0,4050.0,2900.0,3700.0,3550.0,3800.0,2850.0,3750.0,3150.0,4400.0,3600.0,4050.0,2850.0,3950.0,3350.0,4100.0,3050.0,4450.0,3600.0,3900.0,3550.0,4150.0,3700.0,4250.0,3700.0,3900.0,3550.0,4000.0,3200.0,4700.0,3800.0,4200.0,3350.0,3550.0,3800.0,3500.0,3950.0,3600.0,3550.0,4300.0,3400.0,4450.0,3300.0,4300.0,3700.0,4350.0,2900.0,4100.0,3725.0,4725.0,3075.0,4250.0,2925.0,3550.0,3750.0,3900.0,3175.0,4775.0,3825.0,4600.0,3200.0,4275.0,3900.0,4075.0,2900.0,3775.0,3350.0,3325.0,3150.0,3500.0,3450.0,3875.0,3050.0,4000.0,3275.0,4300.0,3050.0,4000.0,3325.0,3500.0,3500.0,4475.0,3425.0,3900.0,3175.0,3975.0,3400.0,4250.0,3400.0,3475.0,3050.0,3725.0,3000.0,3650.0,4250.0,3475.0,3450.0,3750.0,3700.0,4000.0,3500.0,3900.0,3650.0,3525.0,3725.0,3950.0,3250.0,3750.0,4150.0,3700.0,3800.0,3775.0,3700.0,4050.0,3575.0,4050.0,3300.0,3700.0,3450.0,4400.0,3600.0,3400.0,2900.0,3800.0,3300.0,4150.0,3400.0,3800.0,3700.0,4550.0,3200.0,4300.0,3350.0,4100.0,3600.0,3900.0,3850.0,4800.0,2700.0,4500.0,3950.0,3650.0,3550.0,3500.0,3675.0,4450.0,3400.0,4300.0,3250.0,3675.0,3325.0,3950.0,3600.0,4050.0,3350.0,3450.0,3250.0,4050.0,3800.0,3525.0,3950.0,3650.0,3650.0,4000.0,3400.0,3775.0,4100.0,3775.0,4500.0,5700.0,4450.0,5700.0,5400.0,4550.0,4800.0,5200.0,4400.0,5150.0,4650.0,5550.0,4650.0,5850.0,4200.0,5850.0,4150.0,6300.0,4800.0,5350.0,5700.0,5000.0,4400.0,5050.0,5000.0,5100.0,4100.0,5650.0,4600.0,5550.0,5250.0,4700.0,5050.0,6050.0,5150.0,5400.0,4950.0,5250.0,4350.0,5350.0,3950.0,5700.0,4300.0,4750.0,5550.0,4900.0,4200.0,5400.0,5100.0,5300.0,4850.0,5300.0,4400.0,5000.0,4900.0,5050.0,4300.0,5000.0,4450.0,5550.0,4200.0,5300.0,4400.0,5650.0,4700.0,5700.0,4650.0,5800.0,4700.0,5550.0,4750.0,5000.0,5100.0,5200.0,4700.0,5800.0,4600.0,6000.0,4750.0,5950.0,4625.0,5450.0,4725.0,5350.0,4750.0,5600.0,4600.0,5300.0,4875.0,5550.0,4950.0,5400.0,4750.0,5650.0,4850.0,5200.0,4925.0,4875.0,4625.0,5250.0,4850.0,5600.0,4975.0,5500.0,4725.0,5500.0,4700.0,5500.0,4575.0,5500.0,5000.0,5950.0,4650.0,5500.0,4375.0,5850.0,4875.0,6000.0,4925.0,null,4850.0,5750.0,5200.0,5400.0],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"histogram2dcontour\":[{\"type\":\"histogram2dcontour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"choropleth\":[{\"type\":\"choropleth\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"histogram2d\":[{\"type\":\"histogram2d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmap\":[{\"type\":\"heatmap\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"heatmapgl\":[{\"type\":\"heatmapgl\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"contourcarpet\":[{\"type\":\"contourcarpet\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"contour\":[{\"type\":\"contour\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"surface\":[{\"type\":\"surface\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]}],\"mesh3d\":[{\"type\":\"mesh3d\",\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"parcoords\":[{\"type\":\"parcoords\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolargl\":[{\"type\":\"scatterpolargl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"scattergeo\":[{\"type\":\"scattergeo\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterpolar\":[{\"type\":\"scatterpolar\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"scattergl\":[{\"type\":\"scattergl\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatter3d\":[{\"type\":\"scatter3d\",\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattermapbox\":[{\"type\":\"scattermapbox\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scatterternary\":[{\"type\":\"scatterternary\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"scattercarpet\":[{\"type\":\"scattercarpet\",\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}}}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"minorgridcolor\":\"white\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}],\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"#E5ECF6\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}]},\"layout\":{\"autotypenumbers\":\"strict\",\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"hovermode\":\"closest\",\"hoverlabel\":{\"align\":\"left\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"#E5ECF6\",\"polar\":{\"bgcolor\":\"#E5ECF6\",\"angularaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"radialaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"ternary\":{\"bgcolor\":\"#E5ECF6\",\"aaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"},\"caxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\"}},\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]]},\"xaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"yaxis\":{\"gridcolor\":\"white\",\"linecolor\":\"white\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"white\",\"automargin\":true,\"zerolinewidth\":2},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"yaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2},\"zaxis\":{\"backgroundcolor\":\"#E5ECF6\",\"gridcolor\":\"white\",\"linecolor\":\"white\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"white\",\"gridwidth\":2}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"geo\":{\"bgcolor\":\"white\",\"landcolor\":\"#E5ECF6\",\"subunitcolor\":\"white\",\"showland\":true,\"showlakes\":true,\"lakecolor\":\"white\"},\"title\":{\"x\":0.05},\"mapbox\":{\"style\":\"light\"}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"bill_length_mm\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"body_mass_g\"}},\"legend\":{\"tracegroupgap\":0},\"margin\":{\"t\":60}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('ce0556b9-1490-4926-ac4a-506005d49299');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n## Basic customization \n* Now lets add the basic customization. Note that the color-palette automatically re-adjusts for qualitative vs quantitative variables\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nimport plotly.express as px\nimport seaborn as sns\n\n# GET DATA\ndf = sns.load_dataset(\"penguins\");  #print(df.keys())\n\n# GENERATE PLOTLY FIGURE\nfig = px.scatter(\n    data_frame=df,\n    x=\"bill_length_mm\",\n    y=\"body_mass_g\",\n    # color=\"body_mass_g\",\n    color=\"species\",\n    template=\"plotly_white\",  #THEME\n    labels={\"body_mass_g\": \"Body mass (grams)\", \"bill_length_mm\":\"Bill length (mm)\"},  \n    title=\"Visualization of penguins species phenotypical clustering\",\n)\n# MAKE POINTS LARGER AND CHANGE FONT\nfig.update_traces(marker_size=14)\nfig.update_layout(font={\"size\":18})\nfig.show()\n\n# # SAVE AND RENDER \n# file_name=\"./img/plotly-basic-customization.html\"\n# fig.write_html(file_name)\n# from IPython.display import IFrame\n# IFrame(src=file_name, width=1000, height=500)\n```\n\n::: {.cell-output .cell-output-display}\n```{=html}\n<div>                            <div id=\"28ace23c-8bb5-4ac9-b90d-63afb0328c5a\" class=\"plotly-graph-div\" style=\"height:525px; width:100%;\"></div>            <script type=\"text/javascript\">                require([\"plotly\"], function(Plotly) {                    window.PLOTLYENV=window.PLOTLYENV || {};                                    if (document.getElementById(\"28ace23c-8bb5-4ac9-b90d-63afb0328c5a\")) {                    Plotly.newPlot(                        \"28ace23c-8bb5-4ac9-b90d-63afb0328c5a\",                        [{\"hovertemplate\":\"species=Adelie<br>Bill length (mm)=%{x}<br>Body mass (grams)=%{y}<extra></extra>\",\"legendgroup\":\"Adelie\",\"marker\":{\"color\":\"#636efa\",\"symbol\":\"circle\",\"size\":14},\"mode\":\"markers\",\"name\":\"Adelie\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[39.1,39.5,40.3,null,36.7,39.3,38.9,39.2,34.1,42.0,37.8,37.8,41.1,38.6,34.6,36.6,38.7,42.5,34.4,46.0,37.8,37.7,35.9,38.2,38.8,35.3,40.6,40.5,37.9,40.5,39.5,37.2,39.5,40.9,36.4,39.2,38.8,42.2,37.6,39.8,36.5,40.8,36.0,44.1,37.0,39.6,41.1,37.5,36.0,42.3,39.6,40.1,35.0,42.0,34.5,41.4,39.0,40.6,36.5,37.6,35.7,41.3,37.6,41.1,36.4,41.6,35.5,41.1,35.9,41.8,33.5,39.7,39.6,45.8,35.5,42.8,40.9,37.2,36.2,42.1,34.6,42.9,36.7,35.1,37.3,41.3,36.3,36.9,38.3,38.9,35.7,41.1,34.0,39.6,36.2,40.8,38.1,40.3,33.1,43.2,35.0,41.0,37.7,37.8,37.9,39.7,38.6,38.2,38.1,43.2,38.1,45.6,39.7,42.2,39.6,42.7,38.6,37.3,35.7,41.1,36.2,37.7,40.2,41.4,35.2,40.6,38.8,41.5,39.0,44.1,38.5,43.1,36.8,37.5,38.1,41.1,35.6,40.2,37.0,39.7,40.2,40.6,32.1,40.7,37.3,39.0,39.2,36.6,36.0,37.8,36.0,41.5],\"xaxis\":\"x\",\"y\":[3750.0,3800.0,3250.0,null,3450.0,3650.0,3625.0,4675.0,3475.0,4250.0,3300.0,3700.0,3200.0,3800.0,4400.0,3700.0,3450.0,4500.0,3325.0,4200.0,3400.0,3600.0,3800.0,3950.0,3800.0,3800.0,3550.0,3200.0,3150.0,3950.0,3250.0,3900.0,3300.0,3900.0,3325.0,4150.0,3950.0,3550.0,3300.0,4650.0,3150.0,3900.0,3100.0,4400.0,3000.0,4600.0,3425.0,2975.0,3450.0,4150.0,3500.0,4300.0,3450.0,4050.0,2900.0,3700.0,3550.0,3800.0,2850.0,3750.0,3150.0,4400.0,3600.0,4050.0,2850.0,3950.0,3350.0,4100.0,3050.0,4450.0,3600.0,3900.0,3550.0,4150.0,3700.0,4250.0,3700.0,3900.0,3550.0,4000.0,3200.0,4700.0,3800.0,4200.0,3350.0,3550.0,3800.0,3500.0,3950.0,3600.0,3550.0,4300.0,3400.0,4450.0,3300.0,4300.0,3700.0,4350.0,2900.0,4100.0,3725.0,4725.0,3075.0,4250.0,2925.0,3550.0,3750.0,3900.0,3175.0,4775.0,3825.0,4600.0,3200.0,4275.0,3900.0,4075.0,2900.0,3775.0,3350.0,3325.0,3150.0,3500.0,3450.0,3875.0,3050.0,4000.0,3275.0,4300.0,3050.0,4000.0,3325.0,3500.0,3500.0,4475.0,3425.0,3900.0,3175.0,3975.0,3400.0,4250.0,3400.0,3475.0,3050.0,3725.0,3000.0,3650.0,4250.0,3475.0,3450.0,3750.0,3700.0,4000.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"species=Chinstrap<br>Bill length (mm)=%{x}<br>Body mass (grams)=%{y}<extra></extra>\",\"legendgroup\":\"Chinstrap\",\"marker\":{\"color\":\"#EF553B\",\"symbol\":\"circle\",\"size\":14},\"mode\":\"markers\",\"name\":\"Chinstrap\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[46.5,50.0,51.3,45.4,52.7,45.2,46.1,51.3,46.0,51.3,46.6,51.7,47.0,52.0,45.9,50.5,50.3,58.0,46.4,49.2,42.4,48.5,43.2,50.6,46.7,52.0,50.5,49.5,46.4,52.8,40.9,54.2,42.5,51.0,49.7,47.5,47.6,52.0,46.9,53.5,49.0,46.2,50.9,45.5,50.9,50.8,50.1,49.0,51.5,49.8,48.1,51.4,45.7,50.7,42.5,52.2,45.2,49.3,50.2,45.6,51.9,46.8,45.7,55.8,43.5,49.6,50.8,50.2],\"xaxis\":\"x\",\"y\":[3500.0,3900.0,3650.0,3525.0,3725.0,3950.0,3250.0,3750.0,4150.0,3700.0,3800.0,3775.0,3700.0,4050.0,3575.0,4050.0,3300.0,3700.0,3450.0,4400.0,3600.0,3400.0,2900.0,3800.0,3300.0,4150.0,3400.0,3800.0,3700.0,4550.0,3200.0,4300.0,3350.0,4100.0,3600.0,3900.0,3850.0,4800.0,2700.0,4500.0,3950.0,3650.0,3550.0,3500.0,3675.0,4450.0,3400.0,4300.0,3250.0,3675.0,3325.0,3950.0,3600.0,4050.0,3350.0,3450.0,3250.0,4050.0,3800.0,3525.0,3950.0,3650.0,3650.0,4000.0,3400.0,3775.0,4100.0,3775.0],\"yaxis\":\"y\",\"type\":\"scatter\"},{\"hovertemplate\":\"species=Gentoo<br>Bill length (mm)=%{x}<br>Body mass (grams)=%{y}<extra></extra>\",\"legendgroup\":\"Gentoo\",\"marker\":{\"color\":\"#00cc96\",\"symbol\":\"circle\",\"size\":14},\"mode\":\"markers\",\"name\":\"Gentoo\",\"orientation\":\"v\",\"showlegend\":true,\"x\":[46.1,50.0,48.7,50.0,47.6,46.5,45.4,46.7,43.3,46.8,40.9,49.0,45.5,48.4,45.8,49.3,42.0,49.2,46.2,48.7,50.2,45.1,46.5,46.3,42.9,46.1,44.5,47.8,48.2,50.0,47.3,42.8,45.1,59.6,49.1,48.4,42.6,44.4,44.0,48.7,42.7,49.6,45.3,49.6,50.5,43.6,45.5,50.5,44.9,45.2,46.6,48.5,45.1,50.1,46.5,45.0,43.8,45.5,43.2,50.4,45.3,46.2,45.7,54.3,45.8,49.8,46.2,49.5,43.5,50.7,47.7,46.4,48.2,46.5,46.4,48.6,47.5,51.1,45.2,45.2,49.1,52.5,47.4,50.0,44.9,50.8,43.4,51.3,47.5,52.1,47.5,52.2,45.5,49.5,44.5,50.8,49.4,46.9,48.4,51.1,48.5,55.9,47.2,49.1,47.3,46.8,41.7,53.4,43.3,48.1,50.5,49.8,43.5,51.5,46.2,55.1,44.5,48.8,47.2,null,46.8,50.4,45.2,49.9],\"xaxis\":\"x\",\"y\":[4500.0,5700.0,4450.0,5700.0,5400.0,4550.0,4800.0,5200.0,4400.0,5150.0,4650.0,5550.0,4650.0,5850.0,4200.0,5850.0,4150.0,6300.0,4800.0,5350.0,5700.0,5000.0,4400.0,5050.0,5000.0,5100.0,4100.0,5650.0,4600.0,5550.0,5250.0,4700.0,5050.0,6050.0,5150.0,5400.0,4950.0,5250.0,4350.0,5350.0,3950.0,5700.0,4300.0,4750.0,5550.0,4900.0,4200.0,5400.0,5100.0,5300.0,4850.0,5300.0,4400.0,5000.0,4900.0,5050.0,4300.0,5000.0,4450.0,5550.0,4200.0,5300.0,4400.0,5650.0,4700.0,5700.0,4650.0,5800.0,4700.0,5550.0,4750.0,5000.0,5100.0,5200.0,4700.0,5800.0,4600.0,6000.0,4750.0,5950.0,4625.0,5450.0,4725.0,5350.0,4750.0,5600.0,4600.0,5300.0,4875.0,5550.0,4950.0,5400.0,4750.0,5650.0,4850.0,5200.0,4925.0,4875.0,4625.0,5250.0,4850.0,5600.0,4975.0,5500.0,4725.0,5500.0,4700.0,5500.0,4575.0,5500.0,5000.0,5950.0,4650.0,5500.0,4375.0,5850.0,4875.0,6000.0,4925.0,null,4850.0,5750.0,5200.0,5400.0],\"yaxis\":\"y\",\"type\":\"scatter\"}],                        {\"template\":{\"data\":{\"barpolar\":[{\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"barpolar\"}],\"bar\":[{\"error_x\":{\"color\":\"#2a3f5f\"},\"error_y\":{\"color\":\"#2a3f5f\"},\"marker\":{\"line\":{\"color\":\"white\",\"width\":0.5},\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"bar\"}],\"carpet\":[{\"aaxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"baxis\":{\"endlinecolor\":\"#2a3f5f\",\"gridcolor\":\"#C8D4E3\",\"linecolor\":\"#C8D4E3\",\"minorgridcolor\":\"#C8D4E3\",\"startlinecolor\":\"#2a3f5f\"},\"type\":\"carpet\"}],\"choropleth\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"choropleth\"}],\"contourcarpet\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"contourcarpet\"}],\"contour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"contour\"}],\"heatmapgl\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmapgl\"}],\"heatmap\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"heatmap\"}],\"histogram2dcontour\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2dcontour\"}],\"histogram2d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"histogram2d\"}],\"histogram\":[{\"marker\":{\"pattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2}},\"type\":\"histogram\"}],\"mesh3d\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"type\":\"mesh3d\"}],\"parcoords\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"parcoords\"}],\"pie\":[{\"automargin\":true,\"type\":\"pie\"}],\"scatter3d\":[{\"line\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatter3d\"}],\"scattercarpet\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattercarpet\"}],\"scattergeo\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergeo\"}],\"scattergl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattergl\"}],\"scattermapbox\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scattermapbox\"}],\"scatterpolargl\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolargl\"}],\"scatterpolar\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterpolar\"}],\"scatter\":[{\"fillpattern\":{\"fillmode\":\"overlay\",\"size\":10,\"solidity\":0.2},\"type\":\"scatter\"}],\"scatterternary\":[{\"marker\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"type\":\"scatterternary\"}],\"surface\":[{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"},\"colorscale\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"type\":\"surface\"}],\"table\":[{\"cells\":{\"fill\":{\"color\":\"#EBF0F8\"},\"line\":{\"color\":\"white\"}},\"header\":{\"fill\":{\"color\":\"#C8D4E3\"},\"line\":{\"color\":\"white\"}},\"type\":\"table\"}]},\"layout\":{\"annotationdefaults\":{\"arrowcolor\":\"#2a3f5f\",\"arrowhead\":0,\"arrowwidth\":1},\"autotypenumbers\":\"strict\",\"coloraxis\":{\"colorbar\":{\"outlinewidth\":0,\"ticks\":\"\"}},\"colorscale\":{\"diverging\":[[0,\"#8e0152\"],[0.1,\"#c51b7d\"],[0.2,\"#de77ae\"],[0.3,\"#f1b6da\"],[0.4,\"#fde0ef\"],[0.5,\"#f7f7f7\"],[0.6,\"#e6f5d0\"],[0.7,\"#b8e186\"],[0.8,\"#7fbc41\"],[0.9,\"#4d9221\"],[1,\"#276419\"]],\"sequential\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]],\"sequentialminus\":[[0.0,\"#0d0887\"],[0.1111111111111111,\"#46039f\"],[0.2222222222222222,\"#7201a8\"],[0.3333333333333333,\"#9c179e\"],[0.4444444444444444,\"#bd3786\"],[0.5555555555555556,\"#d8576b\"],[0.6666666666666666,\"#ed7953\"],[0.7777777777777778,\"#fb9f3a\"],[0.8888888888888888,\"#fdca26\"],[1.0,\"#f0f921\"]]},\"colorway\":[\"#636efa\",\"#EF553B\",\"#00cc96\",\"#ab63fa\",\"#FFA15A\",\"#19d3f3\",\"#FF6692\",\"#B6E880\",\"#FF97FF\",\"#FECB52\"],\"font\":{\"color\":\"#2a3f5f\"},\"geo\":{\"bgcolor\":\"white\",\"lakecolor\":\"white\",\"landcolor\":\"white\",\"showlakes\":true,\"showland\":true,\"subunitcolor\":\"#C8D4E3\"},\"hoverlabel\":{\"align\":\"left\"},\"hovermode\":\"closest\",\"mapbox\":{\"style\":\"light\"},\"paper_bgcolor\":\"white\",\"plot_bgcolor\":\"white\",\"polar\":{\"angularaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"radialaxis\":{\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\"}},\"scene\":{\"xaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"yaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"},\"zaxis\":{\"backgroundcolor\":\"white\",\"gridcolor\":\"#DFE8F3\",\"gridwidth\":2,\"linecolor\":\"#EBF0F8\",\"showbackground\":true,\"ticks\":\"\",\"zerolinecolor\":\"#EBF0F8\"}},\"shapedefaults\":{\"line\":{\"color\":\"#2a3f5f\"}},\"ternary\":{\"aaxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"baxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"},\"bgcolor\":\"white\",\"caxis\":{\"gridcolor\":\"#DFE8F3\",\"linecolor\":\"#A2B1C6\",\"ticks\":\"\"}},\"title\":{\"x\":0.05},\"xaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2},\"yaxis\":{\"automargin\":true,\"gridcolor\":\"#EBF0F8\",\"linecolor\":\"#EBF0F8\",\"ticks\":\"\",\"title\":{\"standoff\":15},\"zerolinecolor\":\"#EBF0F8\",\"zerolinewidth\":2}}},\"xaxis\":{\"anchor\":\"y\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Bill length (mm)\"}},\"yaxis\":{\"anchor\":\"x\",\"domain\":[0.0,1.0],\"title\":{\"text\":\"Body mass (grams)\"}},\"legend\":{\"title\":{\"text\":\"species\"},\"tracegroupgap\":0},\"title\":{\"text\":\"Visualization of penguins species phenotypical clustering\"},\"font\":{\"size\":18}},                        {\"responsive\": true}                    ).then(function(){\n                            \nvar gd = document.getElementById('28ace23c-8bb5-4ac9-b90d-63afb0328c5a');\nvar x = new MutationObserver(function (mutations, observer) {{\n        var display = window.getComputedStyle(gd).display;\n        if (!display || display === 'none') {{\n            console.log([gd, 'removed!']);\n            Plotly.purge(gd);\n            observer.disconnect();\n        }}\n}});\n\n// Listen for the removal of the full notebook cells\nvar notebookContainer = gd.closest('#notebook-container');\nif (notebookContainer) {{\n    x.observe(notebookContainer, {childList: true});\n}}\n\n// Listen for the clearing of the current output cell\nvar outputEl = gd.closest('.output');\nif (outputEl) {{\n    x.observe(outputEl, {childList: true});\n}}\n\n                        })                };                });            </script>        </div>\n```\n:::\n:::\n\n\n## Example: Plotting a dictionary object\n\n* To plot from a dictionary, the x and y are typically stored as list (or numpy arrays). \n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\n# GENERATE PLOTLY FIGURE OBJECT\nimport plotly.express as px\nimport numpy as np \ndict = {'dates': ['2020-01-01', '2020-01-02'], 'y_vals': np.array([100,200])}\nfig = px.bar(dict, x='dates', y='y_vals')\n\n# SAVE AND RENDER\nfile_name=\"./img/plotly-dict.html\"\nfig.write_html(file_name)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=500, height=400)\n```\n\n::: {.cell-output .cell-output-display execution_count=22}\n```{=html}\n\n        <iframe\n            width=\"500\"\n            height=\"400\"\n            src=\"./img/plotly-dict.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Gap-minder data-set \n\n* In the following examples, we will be using the well known `gapminder` data-set\n<!-- * Let's take a quick look  -->\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nimport plotly.express as px\ndf = px.data.gapminder()\n# print(df.keys())\nprint(df.head())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       country continent  year  lifeExp       pop   gdpPercap iso_alpha  \\\n0  Afghanistan      Asia  1952   28.801   8425333  779.445314       AFG   \n1  Afghanistan      Asia  1957   30.332   9240934  820.853030       AFG   \n2  Afghanistan      Asia  1962   31.997  10267083  853.100710       AFG   \n3  Afghanistan      Asia  1967   34.020  11537966  836.197138       AFG   \n4  Afghanistan      Asia  1972   36.088  13079460  739.981106       AFG   \n\n   iso_num  \n0        4  \n1        4  \n2        4  \n3        4  \n4        4  \n```\n:::\n:::\n\n\n## Example: Plotly themes\n\n* Plotly has various built in themes, similar to MPL and GGPLOT.\n<!-- * Also, note the use of the log scale on the x-axis -->\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\n# https://plotly.com/python/templates/\nimport plotly.express as px\n\ndf = px.data.gapminder()\ndf_2007 = df.query(\"year==2007\")\nk=0\nfor template in [\n    \"plotly\",\n    \"plotly_white\",\n    \"plotly_dark\",\n    \"ggplot2\",\n    \"seaborn\",\n    \"none\",\n    \"simple_white\",\n]:\n    fig = px.scatter(\n        df_2007,\n        x=\"gdpPercap\",\n        y=\"lifeExp\",\n        size=df_2007[\"pop\"] ,\n        color=\"continent\",\n        log_x=True,\n        size_max=60,\n        template=template,\n        title=\"Gapminder 2007: '%s' theme\" % template,\n    )\n    \n    file_name=\"./img/plotly-theme-\"+str(k)+\".html\"; # print(file_name)\n    fig.write_html(file_name)\n    k+=1\n\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=1000, height=500)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```{=html}\n\n        <iframe\n            width=\"1000\"\n            height=\"500\"\n            src=\"./img/plotly-theme-6.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n# Plotly.py \nGraph objects\n\n## Structure of a graph object\n\n* Figures are represented as trees with nodes called \"attributes\".\n* Graph_objects (root node) have three top-level attributes: `data`, `layout`, and `frames` (frames are only needed for animated plots)\n* **Data:** This is a list of dictionaries referred to as \"traces\"\n  - Each trace has one of more than 40 possible types (see below for a list organized by subplot type, including e.g. [`scatter`](https://plotly.com/python/line-and-scatter/), [`bar`](https://plotly.com/python/bar-charts/), [`pie`](https://plotly.com/python/pie-charts/), [`surface`](https://plotly.com/python/3d-surface-plots/), [`choropleth`](https://plotly.com/python/choropleth-maps/) etc), and represents a set of related graphical marks in a figure. Each trace must have a `type` attribute which defines the other allowable attributes.\n  - Each trace is drawn on a single [subplot](https://plotly.com/python/subplots/) whose type must be compatible with the trace's type, or is its own subplot (see below).\n  - Traces may have a single [legend](https://plotly.com/python/legend/) entry, with the exception of pie and funnelarea traces (see below).\n  - Certain trace types support [continuous color, with an associated colorbar](https://plotly.com/python/colorscales/), which can be controlled by attributes either within the trace, or within the layout when using the [coloraxis attribute](https://plotly.com/python/colorscales/).\n\n* **Understanding this structure gives you FULL control over customization of Plotly graph object**\n\n<sup>Source: [click here](https://plotly.com/python/figure-structure/) <sup>\n\n## Looking under the hood {.scrollable}\n\n:::: {.columns}\n::: {.column width=\"50%\"}\n* Viewing the underlying data structure for any plotly.graph_objects.Figure object can be done via print(fig) or  fig.show(\"json\").\n* Figures also support fig.to_dict() and fig.to_json() methods.\n:::  \n::: {.column width=\"50%\"}\n![](img/2023-03-10-12-08-27.png){width=400}\n::: \n::::\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nimport plotly.express as px\nfig = px.line(x=[\"a\",\"b\",\"c\"], y=[1,3,2], title=\"sample figure\")\nprint(fig)\n# fig.show()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFigure({\n    'data': [{'hovertemplate': 'x=%{x}<br>y=%{y}<extra></extra>',\n              'legendgroup': '',\n              'line': {'color': '#636efa', 'dash': 'solid'},\n              'marker': {'symbol': 'circle'},\n              'mode': 'lines',\n              'name': '',\n              'orientation': 'v',\n              'showlegend': False,\n              'type': 'scatter',\n              'x': array(['a', 'b', 'c'], dtype=object),\n              'xaxis': 'x',\n              'y': array([1, 3, 2]),\n              'yaxis': 'y'}],\n    'layout': {'legend': {'tracegroupgap': 0},\n               'template': '...',\n               'title': {'text': 'sample figure'},\n               'xaxis': {'anchor': 'y', 'domain': [0.0, 1.0], 'title': {'text': 'x'}},\n               'yaxis': {'anchor': 'x', 'domain': [0.0, 1.0], 'title': {'text': 'y'}}}\n})\n```\n:::\n:::\n\n\n# Python examples\n\n## Example: Line-plot-1\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nimport plotly.express as px\n\n# EXAMPLE-1\ngap = px.data.gapminder()\ndf = gap.query(\"continent != 'Asia'\")\nfig = px.line(\n    df,\n    x=\"year\",\n    y=\"lifeExp\",\n    color=\"continent\",\n    line_group=\"country\",\n    hover_name=\"country\",\n    height=500,\n    width=1000,\n    template=\"presentation\",\n    labels={\"lifeExp\":\"Life expectancy\", \"year\":\"Year\"},\n)\nfig.update_layout(showlegend=False)\n# fig.show()\n\n\n# SAVE AND RENDER \nfile_name=\"./img/line-plot-1.html\"\nfig.write_html(file_name)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=1000, height=500)\n```\n\n::: {.cell-output .cell-output-display execution_count=26}\n```{=html}\n\n        <iframe\n            width=\"1000\"\n            height=\"500\"\n            src=\"./img/line-plot-1.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Example: Line-plot-2\n\n## Facets \n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nimport plotly.express as px\n\n# import seaborn as sns\n\ngap = px.data.gapminder()\n\nfig = px.line(\n    data_frame=gap,\n    x=\"year\",\n    y=\"lifeExp\",\n    color=\"continent\",\n    facet_col=\"continent\",\n    # line_group=\"country\",\n    facet_col_wrap=3,  # << facet_col is the key\n    labels={\"lifeExp\": \"Life expectancy\"}, #, \"year\" : 'Time (years)'},\n    template=\"plotly_white\",\n    width=1000,\n    height=1000,\n).update_layout(showlegend=False)\n# fig.show()\n\n# SAVE AND RENDER \nfile_name=\"./img/facets.html\"\nfig.write_html(file_name)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=1000, height=500)\n```\n\n::: {.cell-output .cell-output-display execution_count=27}\n```{=html}\n\n        <iframe\n            width=\"1000\"\n            height=\"500\"\n            src=\"./img/facets.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Customization \n\n* add more from https://plotly.com/python/styling-plotly-express/\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nimport plotly.express as px\nimport seaborn as sns\n\npenguins = sns.load_dataset(\"penguins\")\nfig = px.scatter(\n    data_frame=penguins,\n    x=\"bill_length_mm\",\n    y=\"body_mass_g\",\n    color=\"species\",\n    template=\"plotly_white\",\n    labels={\n        \"bill_length_mm\":\"Bill length (mm)\",\n        \"body_mass_g\":\"Body mass (g)\",\n        \"species\":\"Species\"},\n    title=\"Palmer Penguins\",\n)\n\n# UPDATE TOOL TIP\nfig.update_traces(\n    customdata=penguins,\n    hovertemplate=\"Island: %{customdata[1]}<br>Sex: %{customdata[6]}\",\n)\n\nfile_name=\"./img/plotly-custom.html\"\nfig.write_html(file_name)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=1000, height=500)\n```\n\n::: {.cell-output .cell-output-display execution_count=28}\n```{=html}\n\n        <iframe\n            width=\"1000\"\n            height=\"500\"\n            src=\"./img/plotly-custom.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Plotly: 3D \n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\n# SOURCE: https://towardsdatascience.com/cheat-codes-to-better-\n# visualisations-with-plotly-express-21caece3db01\n\nimport plotly.express as px\nimport seaborn as sns\n\n# GET DATA\nelection = px.data.election()\n\n# GENERATE FIGURE\nfig = px.scatter_3d(\n    election,  # dataframe\n    x=\"Joly\",  # x-values column\n    y=\"Coderre\",  # y-values column\n    z=\"Bergeron\",  # z-values column\n    color=\"winner\",  # column shown by color\n    width=500,\n    height=500,\n    hover_name=\"district\",  # hover title\n    symbol=\"result\",  # column shown by shape\n    color_discrete_map={\"Joly\": \"blue\", \"Bergeron\": \"green\", \"Coderre\": \"red\"},\n)\n# specific colors for x,y,z values            )\n# fig.show()\n\nfile_name=\"./img/plotly-3D.html\"\nfig.write_html(file_name)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=1000, height=1000)\n```\n\n::: {.cell-output .cell-output-display execution_count=29}\n```{=html}\n\n        <iframe\n            width=\"1000\"\n            height=\"1000\"\n            src=\"./img/plotly-3D.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n# Bokeh\nA quick introduction.   \n![](img/2023-03-09-17-38-38.png){width=100}\n\n## Introduction\n\n* Bokeh is a *Python library* for creating interactive visualizations for modern web browsers. \n* Can build beautiful graphics, ranging from simple plots to complex dashboards. \n* Just like with plotly, JavaScript-powered visualizations without writing any JavaScript yourself.\n\n\n* Bokeh is a data visualization library that is used by many data science professionals. Plots made with Bokeh are flexible, interactive, and shareable. It uses a python environment to display plots and we can code in python language to display the plots and charts. It is totally python centric and deeply integrated with the language. Bokeh also has a host of third-party libraries that extends its use with a high-level user interface.\n\n* Bokeh is a Python interactive visualization library that targets modern web browsers for presentation. Its goal is to provide elegant, concise construction of novel graphics in the style of D3.js, and to extend this capability with high-performance interactivity over very large or streaming datasets. Bokeh can help anyone who would like to quickly and easily create interactive plots, dashboards, and data applications.\n\n\n<sup> Source: [click here](https://buggyprogrammer.com/bokeh-vs-plotly-which-one-is-better-in-2022/)<sup>\n\n## Bokeh gallery \n\n* Click the following link for a large collection of Bokeh examples\n  * [https://docs.bokeh.org/en/latest/docs/gallery.html](https://docs.bokeh.org/en/latest/docs/gallery.html)\n\n![](img/2023-03-09-18-01-18.png)\n\n## Bokeh: Pros and Cons\n\n### **Advantages of Bokeh**\n\n- Highly \"Pythonic\" \n- Bokeh is the ideal tool to build dashboards and charts quickly with interactivity.\n- There are various output options for the graphs we plot.\n- Bokeh offers an option to embed our visualization in the web pages.\n\n### **Disadvantages of Bokeh**\n\n- The degree of interactivity is limited with this library.\n- We develop charts using only one language python.\n\n<sup> Source: [click here](https://buggyprogrammer.com/bokeh-vs-plotly-which-one-is-better-in-2022/)<sup>\n\n## Plotly: Pros and Cons\n\n### **Advantages of Plotly**\n\n- We can create interactive javascript plots with this library without knowing any javascript.\n- We can share our plots online using multiple platforms.\n- It provides compatibility with many programming languages.\n- The syntax is very simple and we can embed the interactive plots in webpages.\n\n### **Disadvantages of Plotly**\n\n- The number of color palettes is limited and we canâ€™t make much colors in our visualizations.\n- The plots that we share are visible to anyone and we canâ€™t make them private as in bokeh.\n\n<sup> Source: [click here](https://buggyprogrammer.com/bokeh-vs-plotly-which-one-is-better-in-2022/)<sup>\n\n## Bokeh vs Plotly\n\n![](img/2023-03-09-17-57-18.png)\n\n<sup> Source: [click here](https://buggyprogrammer.com/bokeh-vs-plotly-which-one-is-better-in-2022/)<sup>\n\n## Example\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Source: https://buggyprogrammer.com/bokeh-vs-plotly-which-one-is-better-in-2022/\n\nfrom bokeh.plotting import figure, output_file, save\n# output_notebook()\n\nx = [0.1, 0.5, 1.0, 1.5, 2.0, 2.5, 3.0]\ny = [i**2 for i in x]\n\nfig = figure(\n    tools=\"pan,box_zoom,wheel_zoom,zoom_in,zoom_out,reset,save\",\n    title=\"Example Bokeh plot\",\n    y_axis_type=\"log\",\n    y_range=[0.001, 10**3],\n    x_axis_label='Sections',\n    y_axis_label='Particles (log)',\n    plot_width=600, plot_height=400,\n)\n\nfig.circle(x, x, legend_label=\"y=x\", fill_color=\"white\", size=8)\nfig.line(x, y, legend_label=\"y=x^2\", line_width=3, line_color=\"red\")\n\n# show(fig)\nfile_name=\"./img/boken-2.html\"\noutput_file(file_name)\nsave(fig)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=800, height=800)\n```\n\n::: {.cell-output .cell-output-display execution_count=30}\n```{=html}\n\n        <iframe\n            width=\"800\"\n            height=\"800\"\n            src=\"./img/boken-2.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Example\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# LINEPLOT\n# import libraries\nfrom bokeh.plotting import figure, output_file, show, save\n\n# Setup some data\nx = [1, 2, 3, 4, 5]\ny = [6, 7, 2, 4, 5]\n# output_file(\"lines2.html\")\nfig = figure(\n    title=\"Another Line Example\",\n    x_axis_label=\"x\",\n    y_axis_label=\"y\",\n)\n# Add two lines\nfig.line(\n    x,\n    y,\n    legend_label=\"Line 1\",\n    line_width=2,\n    line_color=\"green\",\n)\nfig.line(\n    x,\n    x,\n    legend_label=\"Line 2\",\n    line_width=2,\n    line_color=\"red\",\n)\n# Show the results\n# show(fig)\n\nfile_name=\"./img/boken-1.html\"\noutput_file(file_name)\nsave(fig)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=800, height=800)\n```\n\n::: {.cell-output .cell-output-display execution_count=31}\n```{=html}\n\n        <iframe\n            width=\"800\"\n            height=\"800\"\n            src=\"./img/boken-1.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n## Slider\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nfrom bokeh.layouts import layout\nfrom bokeh.models import Div, RangeSlider, Spinner\nfrom bokeh.plotting import figure, show\n\n# prepare some data\nx = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\ny = [4, 5, 5, 7, 2, 6, 4, 9, 1, 3]\n\n# create plot with circle glyphs\np = figure(\n    x_range=(1, 9),\n    width=500,\n    height=250,\n)\npoints = p.circle(\n    x=x,\n    y=y,\n    size=30,\n    fill_color=\"#21a7df\",\n)\n\n# set up textarea (div)\ndiv = Div(\n    text=\"\"\"\n            <p>Select the circle's size using this control element:</p>\n            \"\"\",\n    width=200,\n    height=30,\n)\n\n# set up spinner\nspinner = Spinner(\n    title=\"Circle size\",\n    low=0,\n    high=60,\n    step=5,\n    value=points.glyph.size,\n    width=200,\n)\nspinner.js_link(\"value\", points.glyph, \"size\")\n\n# set up RangeSlider\nrange_slider = RangeSlider(\n    title=\"Adjust x-axis range\",\n    start=0,\n    end=10,\n    step=1,\n    value=(p.x_range.start, p.x_range.end),\n)\nrange_slider.js_link(\n    \"value\",\n    p.x_range,\n    \"start\",\n    attr_selector=0,\n)\nrange_slider.js_link(\n    \"value\",\n    p.x_range,\n    \"end\",\n    attr_selector=1,\n)\n\n# create layout\nlayout = layout(\n    [\n        [div, spinner],\n        [range_slider],\n        [p],\n    ]\n)\n\n# show result\n# show(layout)\n\nfile_name=\"./img/boken-2.html\"\noutput_file(file_name)\nsave(layout)\nfrom IPython.display import IFrame\nIFrame(src=file_name, width=1000, height=1000)\n```\n\n::: {.cell-output .cell-output-display execution_count=32}\n```{=html}\n\n        <iframe\n            width=\"1000\"\n            height=\"1000\"\n            src=\"./img/boken-2.html\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        \n```\n:::\n:::\n\n\n",
    "supporting": [
      "slides-1_files/figure-revealjs"
    ],
    "filters": [],
    "includes": {
      "include-in-header": [
        "<script src=\"https://cdnjs.cloudflare.com/ajax/libs/require.js/2.3.6/require.min.js\" integrity=\"sha512-c3Nl8+7g4LMSTdrm621y7kf9v3SDPnhxLNhcjFJbKECVnmZHTdo+IRO05sNLTH/D3vA6u1X32ehoLC7WFVdheg==\" crossorigin=\"anonymous\"></script>\n<script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.5.1/jquery.min.js\" integrity=\"sha512-bLT0Qm9VnAYZDflyKcBaQ2gg0hSYNQrJ8RilYldYQ1FxQYoCLtUjuuRuZo+fjqhx/qtq/1itJ0C2ejDxltZVFg==\" crossorigin=\"anonymous\"></script>\n<script type=\"application/javascript\">define('jquery', [],function() {return window.jQuery;})</script>\n        <script type=\"text/javascript\">\n        window.PlotlyConfig = {MathJaxConfig: 'local'};\n        if (window.MathJax && window.MathJax.Hub && window.MathJax.Hub.Config) {window.MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n        if (typeof require !== 'undefined') {\n        require.undef(\"plotly\");\n        requirejs.config({\n            paths: {\n                'plotly': ['https://cdn.plot.ly/plotly-2.18.2.min']\n            }\n        });\n        require(['plotly'], function(Plotly) {\n            window._Plotly = Plotly;\n        });\n        }\n        </script>\n        \n"
      ]
    }
  }
}